
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EmailVerification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model EmailVerification
 * 
 */
export type EmailVerificationModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailVerificationPayload>

export type AggregateEmailVerification = {
  _count: EmailVerificationCountAggregateOutputType | null
  _avg: EmailVerificationAvgAggregateOutputType | null
  _sum: EmailVerificationSumAggregateOutputType | null
  _min: EmailVerificationMinAggregateOutputType | null
  _max: EmailVerificationMaxAggregateOutputType | null
}

export type EmailVerificationAvgAggregateOutputType = {
  id: number | null
}

export type EmailVerificationSumAggregateOutputType = {
  id: number | null
}

export type EmailVerificationMinAggregateOutputType = {
  id: number | null
  verificationToken: string | null
  expiryDate: Date | null
  userId: string | null
}

export type EmailVerificationMaxAggregateOutputType = {
  id: number | null
  verificationToken: string | null
  expiryDate: Date | null
  userId: string | null
}

export type EmailVerificationCountAggregateOutputType = {
  id: number
  verificationToken: number
  expiryDate: number
  userId: number
  _all: number
}


export type EmailVerificationAvgAggregateInputType = {
  id?: true
}

export type EmailVerificationSumAggregateInputType = {
  id?: true
}

export type EmailVerificationMinAggregateInputType = {
  id?: true
  verificationToken?: true
  expiryDate?: true
  userId?: true
}

export type EmailVerificationMaxAggregateInputType = {
  id?: true
  verificationToken?: true
  expiryDate?: true
  userId?: true
}

export type EmailVerificationCountAggregateInputType = {
  id?: true
  verificationToken?: true
  expiryDate?: true
  userId?: true
  _all?: true
}

export type EmailVerificationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailVerification to aggregate.
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerifications to fetch.
   */
  orderBy?: Prisma.EmailVerificationOrderByWithRelationInput | Prisma.EmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailVerifications
  **/
  _count?: true | EmailVerificationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmailVerificationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmailVerificationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailVerificationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailVerificationMaxAggregateInputType
}

export type GetEmailVerificationAggregateType<T extends EmailVerificationAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailVerification]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailVerification[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailVerification[P]>
}




export type EmailVerificationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailVerificationWhereInput
  orderBy?: Prisma.EmailVerificationOrderByWithAggregationInput | Prisma.EmailVerificationOrderByWithAggregationInput[]
  by: Prisma.EmailVerificationScalarFieldEnum[] | Prisma.EmailVerificationScalarFieldEnum
  having?: Prisma.EmailVerificationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailVerificationCountAggregateInputType | true
  _avg?: EmailVerificationAvgAggregateInputType
  _sum?: EmailVerificationSumAggregateInputType
  _min?: EmailVerificationMinAggregateInputType
  _max?: EmailVerificationMaxAggregateInputType
}

export type EmailVerificationGroupByOutputType = {
  id: number
  verificationToken: string
  expiryDate: Date
  userId: string
  _count: EmailVerificationCountAggregateOutputType | null
  _avg: EmailVerificationAvgAggregateOutputType | null
  _sum: EmailVerificationSumAggregateOutputType | null
  _min: EmailVerificationMinAggregateOutputType | null
  _max: EmailVerificationMaxAggregateOutputType | null
}

type GetEmailVerificationGroupByPayload<T extends EmailVerificationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailVerificationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailVerificationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
      }
    >
  >



export type EmailVerificationWhereInput = {
  AND?: Prisma.EmailVerificationWhereInput | Prisma.EmailVerificationWhereInput[]
  OR?: Prisma.EmailVerificationWhereInput[]
  NOT?: Prisma.EmailVerificationWhereInput | Prisma.EmailVerificationWhereInput[]
  id?: Prisma.IntFilter<"EmailVerification"> | number
  verificationToken?: Prisma.StringFilter<"EmailVerification"> | string
  expiryDate?: Prisma.DateTimeFilter<"EmailVerification"> | Date | string
  userId?: Prisma.StringFilter<"EmailVerification"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type EmailVerificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  verificationToken?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type EmailVerificationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  verificationToken?: string
  userId?: string
  AND?: Prisma.EmailVerificationWhereInput | Prisma.EmailVerificationWhereInput[]
  OR?: Prisma.EmailVerificationWhereInput[]
  NOT?: Prisma.EmailVerificationWhereInput | Prisma.EmailVerificationWhereInput[]
  expiryDate?: Prisma.DateTimeFilter<"EmailVerification"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "verificationToken" | "userId">

export type EmailVerificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  verificationToken?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.EmailVerificationCountOrderByAggregateInput
  _avg?: Prisma.EmailVerificationAvgOrderByAggregateInput
  _max?: Prisma.EmailVerificationMaxOrderByAggregateInput
  _min?: Prisma.EmailVerificationMinOrderByAggregateInput
  _sum?: Prisma.EmailVerificationSumOrderByAggregateInput
}

export type EmailVerificationScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailVerificationScalarWhereWithAggregatesInput | Prisma.EmailVerificationScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailVerificationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailVerificationScalarWhereWithAggregatesInput | Prisma.EmailVerificationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"EmailVerification"> | number
  verificationToken?: Prisma.StringWithAggregatesFilter<"EmailVerification"> | string
  expiryDate?: Prisma.DateTimeWithAggregatesFilter<"EmailVerification"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"EmailVerification"> | string
}

export type EmailVerificationCreateInput = {
  verificationToken: string
  expiryDate: Date | string
  user: Prisma.UserCreateNestedOneWithoutEmailVerificationInput
}

export type EmailVerificationUncheckedCreateInput = {
  id?: number
  verificationToken: string
  expiryDate: Date | string
  userId: string
}

export type EmailVerificationUpdateInput = {
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutEmailVerificationNestedInput
}

export type EmailVerificationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailVerificationCreateManyInput = {
  id?: number
  verificationToken: string
  expiryDate: Date | string
  userId: string
}

export type EmailVerificationUpdateManyMutationInput = {
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailVerificationNullableScalarRelationFilter = {
  is?: Prisma.EmailVerificationWhereInput | null
  isNot?: Prisma.EmailVerificationWhereInput | null
}

export type EmailVerificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  verificationToken?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type EmailVerificationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EmailVerificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  verificationToken?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type EmailVerificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  verificationToken?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type EmailVerificationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EmailVerificationCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EmailVerificationCreateOrConnectWithoutUserInput
  connect?: Prisma.EmailVerificationWhereUniqueInput
}

export type EmailVerificationUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EmailVerificationCreateOrConnectWithoutUserInput
  connect?: Prisma.EmailVerificationWhereUniqueInput
}

export type EmailVerificationUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EmailVerificationCreateOrConnectWithoutUserInput
  upsert?: Prisma.EmailVerificationUpsertWithoutUserInput
  disconnect?: Prisma.EmailVerificationWhereInput | boolean
  delete?: Prisma.EmailVerificationWhereInput | boolean
  connect?: Prisma.EmailVerificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailVerificationUpdateToOneWithWhereWithoutUserInput, Prisma.EmailVerificationUpdateWithoutUserInput>, Prisma.EmailVerificationUncheckedUpdateWithoutUserInput>
}

export type EmailVerificationUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.EmailVerificationCreateOrConnectWithoutUserInput
  upsert?: Prisma.EmailVerificationUpsertWithoutUserInput
  disconnect?: Prisma.EmailVerificationWhereInput | boolean
  delete?: Prisma.EmailVerificationWhereInput | boolean
  connect?: Prisma.EmailVerificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailVerificationUpdateToOneWithWhereWithoutUserInput, Prisma.EmailVerificationUpdateWithoutUserInput>, Prisma.EmailVerificationUncheckedUpdateWithoutUserInput>
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type EmailVerificationCreateWithoutUserInput = {
  verificationToken: string
  expiryDate: Date | string
}

export type EmailVerificationUncheckedCreateWithoutUserInput = {
  id?: number
  verificationToken: string
  expiryDate: Date | string
}

export type EmailVerificationCreateOrConnectWithoutUserInput = {
  where: Prisma.EmailVerificationWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
}

export type EmailVerificationUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.EmailVerificationUpdateWithoutUserInput, Prisma.EmailVerificationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EmailVerificationCreateWithoutUserInput, Prisma.EmailVerificationUncheckedCreateWithoutUserInput>
  where?: Prisma.EmailVerificationWhereInput
}

export type EmailVerificationUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.EmailVerificationWhereInput
  data: Prisma.XOR<Prisma.EmailVerificationUpdateWithoutUserInput, Prisma.EmailVerificationUncheckedUpdateWithoutUserInput>
}

export type EmailVerificationUpdateWithoutUserInput = {
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailVerificationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  verificationToken?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EmailVerificationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  verificationToken?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerification"]>

export type EmailVerificationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  verificationToken?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerification"]>

export type EmailVerificationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  verificationToken?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailVerification"]>

export type EmailVerificationSelectScalar = {
  id?: boolean
  verificationToken?: boolean
  expiryDate?: boolean
  userId?: boolean
}

export type EmailVerificationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "verificationToken" | "expiryDate" | "userId", ExtArgs["result"]["emailVerification"]>
export type EmailVerificationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailVerificationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailVerificationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EmailVerificationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailVerification"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    verificationToken: string
    expiryDate: Date
    userId: string
  }, ExtArgs["result"]["emailVerification"]>
  composites: {}
}

export type EmailVerificationGetPayload<S extends boolean | null | undefined | EmailVerificationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload, S>

export type EmailVerificationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailVerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailVerificationCountAggregateInputType | true
  }

export interface EmailVerificationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerification'], meta: { name: 'EmailVerification' } }
  /**
   * Find zero or one EmailVerification that matches the filter.
   * @param {EmailVerificationFindUniqueArgs} args - Arguments to find a EmailVerification
   * @example
   * // Get one EmailVerification
   * const emailVerification = await prisma.emailVerification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailVerificationFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailVerificationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailVerification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailVerificationFindUniqueOrThrowArgs} args - Arguments to find a EmailVerification
   * @example
   * // Get one EmailVerification
   * const emailVerification = await prisma.emailVerification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailVerificationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailVerification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationFindFirstArgs} args - Arguments to find a EmailVerification
   * @example
   * // Get one EmailVerification
   * const emailVerification = await prisma.emailVerification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailVerificationFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailVerificationFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailVerification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationFindFirstOrThrowArgs} args - Arguments to find a EmailVerification
   * @example
   * // Get one EmailVerification
   * const emailVerification = await prisma.emailVerification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailVerificationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailVerifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailVerifications
   * const emailVerifications = await prisma.emailVerification.findMany()
   * 
   * // Get first 10 EmailVerifications
   * const emailVerifications = await prisma.emailVerification.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailVerificationWithIdOnly = await prisma.emailVerification.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailVerificationFindManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailVerification.
   * @param {EmailVerificationCreateArgs} args - Arguments to create a EmailVerification.
   * @example
   * // Create one EmailVerification
   * const EmailVerification = await prisma.emailVerification.create({
   *   data: {
   *     // ... data to create a EmailVerification
   *   }
   * })
   * 
   */
  create<T extends EmailVerificationCreateArgs>(args: Prisma.SelectSubset<T, EmailVerificationCreateArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailVerifications.
   * @param {EmailVerificationCreateManyArgs} args - Arguments to create many EmailVerifications.
   * @example
   * // Create many EmailVerifications
   * const emailVerification = await prisma.emailVerification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailVerificationCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailVerifications and returns the data saved in the database.
   * @param {EmailVerificationCreateManyAndReturnArgs} args - Arguments to create many EmailVerifications.
   * @example
   * // Create many EmailVerifications
   * const emailVerification = await prisma.emailVerification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailVerifications and only return the `id`
   * const emailVerificationWithIdOnly = await prisma.emailVerification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailVerificationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailVerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailVerification.
   * @param {EmailVerificationDeleteArgs} args - Arguments to delete one EmailVerification.
   * @example
   * // Delete one EmailVerification
   * const EmailVerification = await prisma.emailVerification.delete({
   *   where: {
   *     // ... filter to delete one EmailVerification
   *   }
   * })
   * 
   */
  delete<T extends EmailVerificationDeleteArgs>(args: Prisma.SelectSubset<T, EmailVerificationDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailVerification.
   * @param {EmailVerificationUpdateArgs} args - Arguments to update one EmailVerification.
   * @example
   * // Update one EmailVerification
   * const emailVerification = await prisma.emailVerification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailVerificationUpdateArgs>(args: Prisma.SelectSubset<T, EmailVerificationUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailVerifications.
   * @param {EmailVerificationDeleteManyArgs} args - Arguments to filter EmailVerifications to delete.
   * @example
   * // Delete a few EmailVerifications
   * const { count } = await prisma.emailVerification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailVerificationDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailVerifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailVerifications
   * const emailVerification = await prisma.emailVerification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailVerificationUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailVerifications and returns the data updated in the database.
   * @param {EmailVerificationUpdateManyAndReturnArgs} args - Arguments to update many EmailVerifications.
   * @example
   * // Update many EmailVerifications
   * const emailVerification = await prisma.emailVerification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailVerifications and only return the `id`
   * const emailVerificationWithIdOnly = await prisma.emailVerification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailVerificationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailVerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailVerification.
   * @param {EmailVerificationUpsertArgs} args - Arguments to update or create a EmailVerification.
   * @example
   * // Update or create a EmailVerification
   * const emailVerification = await prisma.emailVerification.upsert({
   *   create: {
   *     // ... data to create a EmailVerification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailVerification we want to update
   *   }
   * })
   */
  upsert<T extends EmailVerificationUpsertArgs>(args: Prisma.SelectSubset<T, EmailVerificationUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailVerifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationCountArgs} args - Arguments to filter EmailVerifications to count.
   * @example
   * // Count the number of EmailVerifications
   * const count = await prisma.emailVerification.count({
   *   where: {
   *     // ... the filter for the EmailVerifications we want to count
   *   }
   * })
  **/
  count<T extends EmailVerificationCountArgs>(
    args?: Prisma.Subset<T, EmailVerificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailVerificationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailVerification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailVerificationAggregateArgs>(args: Prisma.Subset<T, EmailVerificationAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationAggregateType<T>>

  /**
   * Group by EmailVerification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailVerificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailVerificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailVerificationGroupByArgs['orderBy'] }
      : { orderBy?: EmailVerificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailVerification model
 */
readonly fields: EmailVerificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailVerification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailVerificationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailVerification model
 */
export interface EmailVerificationFieldRefs {
  readonly id: Prisma.FieldRef<"EmailVerification", 'Int'>
  readonly verificationToken: Prisma.FieldRef<"EmailVerification", 'String'>
  readonly expiryDate: Prisma.FieldRef<"EmailVerification", 'DateTime'>
  readonly userId: Prisma.FieldRef<"EmailVerification", 'String'>
}
    

// Custom InputTypes
/**
 * EmailVerification findUnique
 */
export type EmailVerificationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerification to fetch.
   */
  where: Prisma.EmailVerificationWhereUniqueInput
}

/**
 * EmailVerification findUniqueOrThrow
 */
export type EmailVerificationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerification to fetch.
   */
  where: Prisma.EmailVerificationWhereUniqueInput
}

/**
 * EmailVerification findFirst
 */
export type EmailVerificationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerification to fetch.
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerifications to fetch.
   */
  orderBy?: Prisma.EmailVerificationOrderByWithRelationInput | Prisma.EmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailVerifications.
   */
  cursor?: Prisma.EmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailVerifications.
   */
  distinct?: Prisma.EmailVerificationScalarFieldEnum | Prisma.EmailVerificationScalarFieldEnum[]
}

/**
 * EmailVerification findFirstOrThrow
 */
export type EmailVerificationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerification to fetch.
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerifications to fetch.
   */
  orderBy?: Prisma.EmailVerificationOrderByWithRelationInput | Prisma.EmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailVerifications.
   */
  cursor?: Prisma.EmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailVerifications.
   */
  distinct?: Prisma.EmailVerificationScalarFieldEnum | Prisma.EmailVerificationScalarFieldEnum[]
}

/**
 * EmailVerification findMany
 */
export type EmailVerificationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which EmailVerifications to fetch.
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailVerifications to fetch.
   */
  orderBy?: Prisma.EmailVerificationOrderByWithRelationInput | Prisma.EmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailVerifications.
   */
  cursor?: Prisma.EmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailVerifications.
   */
  skip?: number
  distinct?: Prisma.EmailVerificationScalarFieldEnum | Prisma.EmailVerificationScalarFieldEnum[]
}

/**
 * EmailVerification create
 */
export type EmailVerificationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailVerification.
   */
  data: Prisma.XOR<Prisma.EmailVerificationCreateInput, Prisma.EmailVerificationUncheckedCreateInput>
}

/**
 * EmailVerification createMany
 */
export type EmailVerificationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailVerifications.
   */
  data: Prisma.EmailVerificationCreateManyInput | Prisma.EmailVerificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailVerification createManyAndReturn
 */
export type EmailVerificationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * The data used to create many EmailVerifications.
   */
  data: Prisma.EmailVerificationCreateManyInput | Prisma.EmailVerificationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailVerification update
 */
export type EmailVerificationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailVerification.
   */
  data: Prisma.XOR<Prisma.EmailVerificationUpdateInput, Prisma.EmailVerificationUncheckedUpdateInput>
  /**
   * Choose, which EmailVerification to update.
   */
  where: Prisma.EmailVerificationWhereUniqueInput
}

/**
 * EmailVerification updateMany
 */
export type EmailVerificationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailVerifications.
   */
  data: Prisma.XOR<Prisma.EmailVerificationUpdateManyMutationInput, Prisma.EmailVerificationUncheckedUpdateManyInput>
  /**
   * Filter which EmailVerifications to update
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * Limit how many EmailVerifications to update.
   */
  limit?: number
}

/**
 * EmailVerification updateManyAndReturn
 */
export type EmailVerificationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * The data used to update EmailVerifications.
   */
  data: Prisma.XOR<Prisma.EmailVerificationUpdateManyMutationInput, Prisma.EmailVerificationUncheckedUpdateManyInput>
  /**
   * Filter which EmailVerifications to update
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * Limit how many EmailVerifications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailVerification upsert
 */
export type EmailVerificationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailVerification to update in case it exists.
   */
  where: Prisma.EmailVerificationWhereUniqueInput
  /**
   * In case the EmailVerification found by the `where` argument doesn't exist, create a new EmailVerification with this data.
   */
  create: Prisma.XOR<Prisma.EmailVerificationCreateInput, Prisma.EmailVerificationUncheckedCreateInput>
  /**
   * In case the EmailVerification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailVerificationUpdateInput, Prisma.EmailVerificationUncheckedUpdateInput>
}

/**
 * EmailVerification delete
 */
export type EmailVerificationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
  /**
   * Filter which EmailVerification to delete.
   */
  where: Prisma.EmailVerificationWhereUniqueInput
}

/**
 * EmailVerification deleteMany
 */
export type EmailVerificationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailVerifications to delete
   */
  where?: Prisma.EmailVerificationWhereInput
  /**
   * Limit how many EmailVerifications to delete.
   */
  limit?: number
}

/**
 * EmailVerification without action
 */
export type EmailVerificationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailVerification
   */
  select?: Prisma.EmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailVerification
   */
  omit?: Prisma.EmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailVerificationInclude<ExtArgs> | null
}
