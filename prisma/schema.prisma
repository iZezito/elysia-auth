generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismabox {
  provider = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName = "t"
  inputModel = true
  output   = "../generated/prismabox"
}

model User {
  id                             Int      @id @default(autoincrement())
  name                           String
  email                          String   @unique
  password                       String
  oauth2Provider                 String?
  emailVerified                  Boolean?  @default(false)
  twoFactorAuthenticationEnabled Boolean?  @default(false)

  posts                        Post[]
  emailVerification                EmailVerification?
  passwordResetToken               PasswordResetToken?
  twoFactorAuthentication          TwoFactorAuthentication?
}

model Post {
  id                            Int @id @default(autoincrement())
  title                         String?
  authorId                      Int
  author                        User    @relation(fields: [authorId], references: [id])
}

model EmailVerification {
  id                Int      @id @default(autoincrement())
  verificationToken String   @unique
  expiryDate        DateTime

  
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String
  expiryDate DateTime

  // Relacionamento 1-para-1 opcional com User
  userId     Int?     @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model TwoFactorAuthentication {
  id         Int      @id @default(autoincrement())
  code       String
  expiryDate DateTime

  // Relacionamento 1-para-1 com User
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_authentication")
}


