
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TwoFactorAuthentication` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model TwoFactorAuthentication
 * 
 */
export type TwoFactorAuthenticationModel = runtime.Types.Result.DefaultSelection<Prisma.$TwoFactorAuthenticationPayload>

export type AggregateTwoFactorAuthentication = {
  _count: TwoFactorAuthenticationCountAggregateOutputType | null
  _avg: TwoFactorAuthenticationAvgAggregateOutputType | null
  _sum: TwoFactorAuthenticationSumAggregateOutputType | null
  _min: TwoFactorAuthenticationMinAggregateOutputType | null
  _max: TwoFactorAuthenticationMaxAggregateOutputType | null
}

export type TwoFactorAuthenticationAvgAggregateOutputType = {
  id: number | null
}

export type TwoFactorAuthenticationSumAggregateOutputType = {
  id: number | null
}

export type TwoFactorAuthenticationMinAggregateOutputType = {
  id: number | null
  code: string | null
  expiryDate: Date | null
  userId: string | null
}

export type TwoFactorAuthenticationMaxAggregateOutputType = {
  id: number | null
  code: string | null
  expiryDate: Date | null
  userId: string | null
}

export type TwoFactorAuthenticationCountAggregateOutputType = {
  id: number
  code: number
  expiryDate: number
  userId: number
  _all: number
}


export type TwoFactorAuthenticationAvgAggregateInputType = {
  id?: true
}

export type TwoFactorAuthenticationSumAggregateInputType = {
  id?: true
}

export type TwoFactorAuthenticationMinAggregateInputType = {
  id?: true
  code?: true
  expiryDate?: true
  userId?: true
}

export type TwoFactorAuthenticationMaxAggregateInputType = {
  id?: true
  code?: true
  expiryDate?: true
  userId?: true
}

export type TwoFactorAuthenticationCountAggregateInputType = {
  id?: true
  code?: true
  expiryDate?: true
  userId?: true
  _all?: true
}

export type TwoFactorAuthenticationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TwoFactorAuthentication to aggregate.
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorAuthentications to fetch.
   */
  orderBy?: Prisma.TwoFactorAuthenticationOrderByWithRelationInput | Prisma.TwoFactorAuthenticationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorAuthentications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorAuthentications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TwoFactorAuthentications
  **/
  _count?: true | TwoFactorAuthenticationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TwoFactorAuthenticationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TwoFactorAuthenticationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TwoFactorAuthenticationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TwoFactorAuthenticationMaxAggregateInputType
}

export type GetTwoFactorAuthenticationAggregateType<T extends TwoFactorAuthenticationAggregateArgs> = {
      [P in keyof T & keyof AggregateTwoFactorAuthentication]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTwoFactorAuthentication[P]>
    : Prisma.GetScalarType<T[P], AggregateTwoFactorAuthentication[P]>
}




export type TwoFactorAuthenticationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TwoFactorAuthenticationWhereInput
  orderBy?: Prisma.TwoFactorAuthenticationOrderByWithAggregationInput | Prisma.TwoFactorAuthenticationOrderByWithAggregationInput[]
  by: Prisma.TwoFactorAuthenticationScalarFieldEnum[] | Prisma.TwoFactorAuthenticationScalarFieldEnum
  having?: Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TwoFactorAuthenticationCountAggregateInputType | true
  _avg?: TwoFactorAuthenticationAvgAggregateInputType
  _sum?: TwoFactorAuthenticationSumAggregateInputType
  _min?: TwoFactorAuthenticationMinAggregateInputType
  _max?: TwoFactorAuthenticationMaxAggregateInputType
}

export type TwoFactorAuthenticationGroupByOutputType = {
  id: number
  code: string
  expiryDate: Date
  userId: string
  _count: TwoFactorAuthenticationCountAggregateOutputType | null
  _avg: TwoFactorAuthenticationAvgAggregateOutputType | null
  _sum: TwoFactorAuthenticationSumAggregateOutputType | null
  _min: TwoFactorAuthenticationMinAggregateOutputType | null
  _max: TwoFactorAuthenticationMaxAggregateOutputType | null
}

type GetTwoFactorAuthenticationGroupByPayload<T extends TwoFactorAuthenticationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TwoFactorAuthenticationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TwoFactorAuthenticationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TwoFactorAuthenticationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TwoFactorAuthenticationGroupByOutputType[P]>
      }
    >
  >



export type TwoFactorAuthenticationWhereInput = {
  AND?: Prisma.TwoFactorAuthenticationWhereInput | Prisma.TwoFactorAuthenticationWhereInput[]
  OR?: Prisma.TwoFactorAuthenticationWhereInput[]
  NOT?: Prisma.TwoFactorAuthenticationWhereInput | Prisma.TwoFactorAuthenticationWhereInput[]
  id?: Prisma.IntFilter<"TwoFactorAuthentication"> | number
  code?: Prisma.StringFilter<"TwoFactorAuthentication"> | string
  expiryDate?: Prisma.DateTimeFilter<"TwoFactorAuthentication"> | Date | string
  userId?: Prisma.StringFilter<"TwoFactorAuthentication"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TwoFactorAuthenticationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type TwoFactorAuthenticationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId?: string
  AND?: Prisma.TwoFactorAuthenticationWhereInput | Prisma.TwoFactorAuthenticationWhereInput[]
  OR?: Prisma.TwoFactorAuthenticationWhereInput[]
  NOT?: Prisma.TwoFactorAuthenticationWhereInput | Prisma.TwoFactorAuthenticationWhereInput[]
  code?: Prisma.StringFilter<"TwoFactorAuthentication"> | string
  expiryDate?: Prisma.DateTimeFilter<"TwoFactorAuthentication"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type TwoFactorAuthenticationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.TwoFactorAuthenticationCountOrderByAggregateInput
  _avg?: Prisma.TwoFactorAuthenticationAvgOrderByAggregateInput
  _max?: Prisma.TwoFactorAuthenticationMaxOrderByAggregateInput
  _min?: Prisma.TwoFactorAuthenticationMinOrderByAggregateInput
  _sum?: Prisma.TwoFactorAuthenticationSumOrderByAggregateInput
}

export type TwoFactorAuthenticationScalarWhereWithAggregatesInput = {
  AND?: Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput | Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput[]
  OR?: Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput | Prisma.TwoFactorAuthenticationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TwoFactorAuthentication"> | number
  code?: Prisma.StringWithAggregatesFilter<"TwoFactorAuthentication"> | string
  expiryDate?: Prisma.DateTimeWithAggregatesFilter<"TwoFactorAuthentication"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"TwoFactorAuthentication"> | string
}

export type TwoFactorAuthenticationCreateInput = {
  code: string
  expiryDate: Date | string
  user: Prisma.UserCreateNestedOneWithoutTwoFactorAuthenticationInput
}

export type TwoFactorAuthenticationUncheckedCreateInput = {
  id?: number
  code: string
  expiryDate: Date | string
  userId: string
}

export type TwoFactorAuthenticationUpdateInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTwoFactorAuthenticationNestedInput
}

export type TwoFactorAuthenticationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TwoFactorAuthenticationCreateManyInput = {
  id?: number
  code: string
  expiryDate: Date | string
  userId: string
}

export type TwoFactorAuthenticationUpdateManyMutationInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TwoFactorAuthenticationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TwoFactorAuthenticationNullableScalarRelationFilter = {
  is?: Prisma.TwoFactorAuthenticationWhereInput | null
  isNot?: Prisma.TwoFactorAuthenticationWhereInput | null
}

export type TwoFactorAuthenticationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TwoFactorAuthenticationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TwoFactorAuthenticationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TwoFactorAuthenticationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  code?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type TwoFactorAuthenticationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TwoFactorAuthenticationCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TwoFactorAuthenticationCreateOrConnectWithoutUserInput
  connect?: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

export type TwoFactorAuthenticationUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TwoFactorAuthenticationCreateOrConnectWithoutUserInput
  connect?: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

export type TwoFactorAuthenticationUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TwoFactorAuthenticationCreateOrConnectWithoutUserInput
  upsert?: Prisma.TwoFactorAuthenticationUpsertWithoutUserInput
  disconnect?: Prisma.TwoFactorAuthenticationWhereInput | boolean
  delete?: Prisma.TwoFactorAuthenticationWhereInput | boolean
  connect?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateToOneWithWhereWithoutUserInput, Prisma.TwoFactorAuthenticationUpdateWithoutUserInput>, Prisma.TwoFactorAuthenticationUncheckedUpdateWithoutUserInput>
}

export type TwoFactorAuthenticationUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TwoFactorAuthenticationCreateOrConnectWithoutUserInput
  upsert?: Prisma.TwoFactorAuthenticationUpsertWithoutUserInput
  disconnect?: Prisma.TwoFactorAuthenticationWhereInput | boolean
  delete?: Prisma.TwoFactorAuthenticationWhereInput | boolean
  connect?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateToOneWithWhereWithoutUserInput, Prisma.TwoFactorAuthenticationUpdateWithoutUserInput>, Prisma.TwoFactorAuthenticationUncheckedUpdateWithoutUserInput>
}

export type TwoFactorAuthenticationCreateWithoutUserInput = {
  code: string
  expiryDate: Date | string
}

export type TwoFactorAuthenticationUncheckedCreateWithoutUserInput = {
  id?: number
  code: string
  expiryDate: Date | string
}

export type TwoFactorAuthenticationCreateOrConnectWithoutUserInput = {
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
  create: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
}

export type TwoFactorAuthenticationUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedCreateWithoutUserInput>
  where?: Prisma.TwoFactorAuthenticationWhereInput
}

export type TwoFactorAuthenticationUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.TwoFactorAuthenticationWhereInput
  data: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateWithoutUserInput, Prisma.TwoFactorAuthenticationUncheckedUpdateWithoutUserInput>
}

export type TwoFactorAuthenticationUpdateWithoutUserInput = {
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TwoFactorAuthenticationUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  code?: Prisma.StringFieldUpdateOperationsInput | string
  expiryDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TwoFactorAuthenticationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["twoFactorAuthentication"]>

export type TwoFactorAuthenticationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["twoFactorAuthentication"]>

export type TwoFactorAuthenticationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  code?: boolean
  expiryDate?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["twoFactorAuthentication"]>

export type TwoFactorAuthenticationSelectScalar = {
  id?: boolean
  code?: boolean
  expiryDate?: boolean
  userId?: boolean
}

export type TwoFactorAuthenticationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "code" | "expiryDate" | "userId", ExtArgs["result"]["twoFactorAuthentication"]>
export type TwoFactorAuthenticationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TwoFactorAuthenticationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TwoFactorAuthenticationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TwoFactorAuthenticationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TwoFactorAuthentication"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    code: string
    expiryDate: Date
    userId: string
  }, ExtArgs["result"]["twoFactorAuthentication"]>
  composites: {}
}

export type TwoFactorAuthenticationGetPayload<S extends boolean | null | undefined | TwoFactorAuthenticationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload, S>

export type TwoFactorAuthenticationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TwoFactorAuthenticationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TwoFactorAuthenticationCountAggregateInputType | true
  }

export interface TwoFactorAuthenticationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TwoFactorAuthentication'], meta: { name: 'TwoFactorAuthentication' } }
  /**
   * Find zero or one TwoFactorAuthentication that matches the filter.
   * @param {TwoFactorAuthenticationFindUniqueArgs} args - Arguments to find a TwoFactorAuthentication
   * @example
   * // Get one TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TwoFactorAuthenticationFindUniqueArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TwoFactorAuthentication that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TwoFactorAuthenticationFindUniqueOrThrowArgs} args - Arguments to find a TwoFactorAuthentication
   * @example
   * // Get one TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TwoFactorAuthenticationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TwoFactorAuthentication that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationFindFirstArgs} args - Arguments to find a TwoFactorAuthentication
   * @example
   * // Get one TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TwoFactorAuthenticationFindFirstArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationFindFirstArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TwoFactorAuthentication that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationFindFirstOrThrowArgs} args - Arguments to find a TwoFactorAuthentication
   * @example
   * // Get one TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TwoFactorAuthenticationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TwoFactorAuthentications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TwoFactorAuthentications
   * const twoFactorAuthentications = await prisma.twoFactorAuthentication.findMany()
   * 
   * // Get first 10 TwoFactorAuthentications
   * const twoFactorAuthentications = await prisma.twoFactorAuthentication.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const twoFactorAuthenticationWithIdOnly = await prisma.twoFactorAuthentication.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TwoFactorAuthenticationFindManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TwoFactorAuthentication.
   * @param {TwoFactorAuthenticationCreateArgs} args - Arguments to create a TwoFactorAuthentication.
   * @example
   * // Create one TwoFactorAuthentication
   * const TwoFactorAuthentication = await prisma.twoFactorAuthentication.create({
   *   data: {
   *     // ... data to create a TwoFactorAuthentication
   *   }
   * })
   * 
   */
  create<T extends TwoFactorAuthenticationCreateArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationCreateArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TwoFactorAuthentications.
   * @param {TwoFactorAuthenticationCreateManyArgs} args - Arguments to create many TwoFactorAuthentications.
   * @example
   * // Create many TwoFactorAuthentications
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TwoFactorAuthenticationCreateManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TwoFactorAuthentications and returns the data saved in the database.
   * @param {TwoFactorAuthenticationCreateManyAndReturnArgs} args - Arguments to create many TwoFactorAuthentications.
   * @example
   * // Create many TwoFactorAuthentications
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TwoFactorAuthentications and only return the `id`
   * const twoFactorAuthenticationWithIdOnly = await prisma.twoFactorAuthentication.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TwoFactorAuthenticationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TwoFactorAuthentication.
   * @param {TwoFactorAuthenticationDeleteArgs} args - Arguments to delete one TwoFactorAuthentication.
   * @example
   * // Delete one TwoFactorAuthentication
   * const TwoFactorAuthentication = await prisma.twoFactorAuthentication.delete({
   *   where: {
   *     // ... filter to delete one TwoFactorAuthentication
   *   }
   * })
   * 
   */
  delete<T extends TwoFactorAuthenticationDeleteArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationDeleteArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TwoFactorAuthentication.
   * @param {TwoFactorAuthenticationUpdateArgs} args - Arguments to update one TwoFactorAuthentication.
   * @example
   * // Update one TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TwoFactorAuthenticationUpdateArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationUpdateArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TwoFactorAuthentications.
   * @param {TwoFactorAuthenticationDeleteManyArgs} args - Arguments to filter TwoFactorAuthentications to delete.
   * @example
   * // Delete a few TwoFactorAuthentications
   * const { count } = await prisma.twoFactorAuthentication.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TwoFactorAuthenticationDeleteManyArgs>(args?: Prisma.SelectSubset<T, TwoFactorAuthenticationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TwoFactorAuthentications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TwoFactorAuthentications
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TwoFactorAuthenticationUpdateManyArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TwoFactorAuthentications and returns the data updated in the database.
   * @param {TwoFactorAuthenticationUpdateManyAndReturnArgs} args - Arguments to update many TwoFactorAuthentications.
   * @example
   * // Update many TwoFactorAuthentications
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TwoFactorAuthentications and only return the `id`
   * const twoFactorAuthenticationWithIdOnly = await prisma.twoFactorAuthentication.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TwoFactorAuthenticationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TwoFactorAuthentication.
   * @param {TwoFactorAuthenticationUpsertArgs} args - Arguments to update or create a TwoFactorAuthentication.
   * @example
   * // Update or create a TwoFactorAuthentication
   * const twoFactorAuthentication = await prisma.twoFactorAuthentication.upsert({
   *   create: {
   *     // ... data to create a TwoFactorAuthentication
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TwoFactorAuthentication we want to update
   *   }
   * })
   */
  upsert<T extends TwoFactorAuthenticationUpsertArgs>(args: Prisma.SelectSubset<T, TwoFactorAuthenticationUpsertArgs<ExtArgs>>): Prisma.Prisma__TwoFactorAuthenticationClient<runtime.Types.Result.GetResult<Prisma.$TwoFactorAuthenticationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TwoFactorAuthentications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationCountArgs} args - Arguments to filter TwoFactorAuthentications to count.
   * @example
   * // Count the number of TwoFactorAuthentications
   * const count = await prisma.twoFactorAuthentication.count({
   *   where: {
   *     // ... the filter for the TwoFactorAuthentications we want to count
   *   }
   * })
  **/
  count<T extends TwoFactorAuthenticationCountArgs>(
    args?: Prisma.Subset<T, TwoFactorAuthenticationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TwoFactorAuthenticationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TwoFactorAuthentication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TwoFactorAuthenticationAggregateArgs>(args: Prisma.Subset<T, TwoFactorAuthenticationAggregateArgs>): Prisma.PrismaPromise<GetTwoFactorAuthenticationAggregateType<T>>

  /**
   * Group by TwoFactorAuthentication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TwoFactorAuthenticationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TwoFactorAuthenticationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TwoFactorAuthenticationGroupByArgs['orderBy'] }
      : { orderBy?: TwoFactorAuthenticationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TwoFactorAuthenticationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoFactorAuthenticationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TwoFactorAuthentication model
 */
readonly fields: TwoFactorAuthenticationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TwoFactorAuthentication.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TwoFactorAuthenticationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TwoFactorAuthentication model
 */
export interface TwoFactorAuthenticationFieldRefs {
  readonly id: Prisma.FieldRef<"TwoFactorAuthentication", 'Int'>
  readonly code: Prisma.FieldRef<"TwoFactorAuthentication", 'String'>
  readonly expiryDate: Prisma.FieldRef<"TwoFactorAuthentication", 'DateTime'>
  readonly userId: Prisma.FieldRef<"TwoFactorAuthentication", 'String'>
}
    

// Custom InputTypes
/**
 * TwoFactorAuthentication findUnique
 */
export type TwoFactorAuthenticationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorAuthentication to fetch.
   */
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

/**
 * TwoFactorAuthentication findUniqueOrThrow
 */
export type TwoFactorAuthenticationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorAuthentication to fetch.
   */
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

/**
 * TwoFactorAuthentication findFirst
 */
export type TwoFactorAuthenticationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorAuthentication to fetch.
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorAuthentications to fetch.
   */
  orderBy?: Prisma.TwoFactorAuthenticationOrderByWithRelationInput | Prisma.TwoFactorAuthenticationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TwoFactorAuthentications.
   */
  cursor?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorAuthentications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorAuthentications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TwoFactorAuthentications.
   */
  distinct?: Prisma.TwoFactorAuthenticationScalarFieldEnum | Prisma.TwoFactorAuthenticationScalarFieldEnum[]
}

/**
 * TwoFactorAuthentication findFirstOrThrow
 */
export type TwoFactorAuthenticationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorAuthentication to fetch.
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorAuthentications to fetch.
   */
  orderBy?: Prisma.TwoFactorAuthenticationOrderByWithRelationInput | Prisma.TwoFactorAuthenticationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TwoFactorAuthentications.
   */
  cursor?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorAuthentications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorAuthentications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TwoFactorAuthentications.
   */
  distinct?: Prisma.TwoFactorAuthenticationScalarFieldEnum | Prisma.TwoFactorAuthenticationScalarFieldEnum[]
}

/**
 * TwoFactorAuthentication findMany
 */
export type TwoFactorAuthenticationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter, which TwoFactorAuthentications to fetch.
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TwoFactorAuthentications to fetch.
   */
  orderBy?: Prisma.TwoFactorAuthenticationOrderByWithRelationInput | Prisma.TwoFactorAuthenticationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TwoFactorAuthentications.
   */
  cursor?: Prisma.TwoFactorAuthenticationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TwoFactorAuthentications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TwoFactorAuthentications.
   */
  skip?: number
  distinct?: Prisma.TwoFactorAuthenticationScalarFieldEnum | Prisma.TwoFactorAuthenticationScalarFieldEnum[]
}

/**
 * TwoFactorAuthentication create
 */
export type TwoFactorAuthenticationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * The data needed to create a TwoFactorAuthentication.
   */
  data: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateInput, Prisma.TwoFactorAuthenticationUncheckedCreateInput>
}

/**
 * TwoFactorAuthentication createMany
 */
export type TwoFactorAuthenticationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TwoFactorAuthentications.
   */
  data: Prisma.TwoFactorAuthenticationCreateManyInput | Prisma.TwoFactorAuthenticationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TwoFactorAuthentication createManyAndReturn
 */
export type TwoFactorAuthenticationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * The data used to create many TwoFactorAuthentications.
   */
  data: Prisma.TwoFactorAuthenticationCreateManyInput | Prisma.TwoFactorAuthenticationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TwoFactorAuthentication update
 */
export type TwoFactorAuthenticationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * The data needed to update a TwoFactorAuthentication.
   */
  data: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateInput, Prisma.TwoFactorAuthenticationUncheckedUpdateInput>
  /**
   * Choose, which TwoFactorAuthentication to update.
   */
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

/**
 * TwoFactorAuthentication updateMany
 */
export type TwoFactorAuthenticationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TwoFactorAuthentications.
   */
  data: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateManyMutationInput, Prisma.TwoFactorAuthenticationUncheckedUpdateManyInput>
  /**
   * Filter which TwoFactorAuthentications to update
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * Limit how many TwoFactorAuthentications to update.
   */
  limit?: number
}

/**
 * TwoFactorAuthentication updateManyAndReturn
 */
export type TwoFactorAuthenticationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * The data used to update TwoFactorAuthentications.
   */
  data: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateManyMutationInput, Prisma.TwoFactorAuthenticationUncheckedUpdateManyInput>
  /**
   * Filter which TwoFactorAuthentications to update
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * Limit how many TwoFactorAuthentications to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TwoFactorAuthentication upsert
 */
export type TwoFactorAuthenticationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * The filter to search for the TwoFactorAuthentication to update in case it exists.
   */
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
  /**
   * In case the TwoFactorAuthentication found by the `where` argument doesn't exist, create a new TwoFactorAuthentication with this data.
   */
  create: Prisma.XOR<Prisma.TwoFactorAuthenticationCreateInput, Prisma.TwoFactorAuthenticationUncheckedCreateInput>
  /**
   * In case the TwoFactorAuthentication was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TwoFactorAuthenticationUpdateInput, Prisma.TwoFactorAuthenticationUncheckedUpdateInput>
}

/**
 * TwoFactorAuthentication delete
 */
export type TwoFactorAuthenticationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
  /**
   * Filter which TwoFactorAuthentication to delete.
   */
  where: Prisma.TwoFactorAuthenticationWhereUniqueInput
}

/**
 * TwoFactorAuthentication deleteMany
 */
export type TwoFactorAuthenticationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TwoFactorAuthentications to delete
   */
  where?: Prisma.TwoFactorAuthenticationWhereInput
  /**
   * Limit how many TwoFactorAuthentications to delete.
   */
  limit?: number
}

/**
 * TwoFactorAuthentication without action
 */
export type TwoFactorAuthenticationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TwoFactorAuthentication
   */
  select?: Prisma.TwoFactorAuthenticationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TwoFactorAuthentication
   */
  omit?: Prisma.TwoFactorAuthenticationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TwoFactorAuthenticationInclude<ExtArgs> | null
}
