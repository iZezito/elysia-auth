generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator prismabox {
//   provider = "prismabox"
//   typeboxImportDependencyName = "elysia"
//   typeboxImportVariableName = "t"
//   inputModel = true
//   output   = "../generated/prismabox"
// }

enum UserRole {
  DEFAULT
  ADMIN
}

model User {
  id                             String   @id @default(cuid())
  name                           String
  email                          String   @unique
  role                           UserRole @default(DEFAULT)
  password                       String
  oauth2Provider                 String?
  emailVerified                  Boolean? @default(false)
  twoFactorAuthenticationEnabled Boolean? @default(false)

  posts                   Post[]
  emailVerification       EmailVerification?
  passwordResetToken      PasswordResetToken?
  twoFactorAuthentication TwoFactorAuthentication?
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String?
  authorId String
  author   User    @relation(fields: [authorId], references: [id])
}

model EmailVerification {
  id                Int      @id @default(autoincrement())
  verificationToken String   @unique
  expiryDate        DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String
  expiryDate DateTime

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model TwoFactorAuthentication {
  id         Int      @id @default(autoincrement())
  code       String
  expiryDate DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_authentication")
}
